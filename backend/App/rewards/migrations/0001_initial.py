# Generated by Django 5.2.7 on 2025-10-23 22:45

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Reward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Nome da Recompensa')),
                ('description', models.TextField(help_text='Descrição detalhada da recompensa', verbose_name='Descrição')),
                ('required_points', models.IntegerField(help_text='Quantidade de tokens necessários para desbloquear', verbose_name='Pontos Necessários')),
                ('type', models.CharField(choices=[('Medalha', 'Medalha/Conquista'), ('Desconto', 'Desconto'), ('Prêmio', 'Prêmio'), ('Benefício', 'Benefício')], max_length=20, verbose_name='Tipo de Recompensa')),
                ('icon', models.CharField(blank=True, help_text='Nome do ícone ou emoji', max_length=50, null=True, verbose_name='Ícone')),
                ('image', models.ImageField(blank=True, null=True, upload_to='rewards/', verbose_name='Imagem')),
                ('is_active', models.BooleanField(default=True, help_text='Se a recompensa está disponível para resgate', verbose_name='Ativa')),
                ('stock', models.IntegerField(default=-1, help_text='Quantidade disponível (-1 para ilimitado)', verbose_name='Estoque')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Recompensa',
                'verbose_name_plural': 'Recompensas',
                'db_table': 'rewards',
                'ordering': ['required_points', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Goal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Nome da Meta')),
                ('description', models.TextField(blank=True, verbose_name='Descrição')),
                ('target_value', models.IntegerField(help_text='Valor a ser atingido', verbose_name='Valor Alvo')),
                ('metric', models.CharField(choices=[('water_save', 'Economia de Água (litros)'), ('energy_save', 'Economia de Energia (kWh)'), ('action_count', 'Quantidade de Ações'), ('points', 'Pontos Acumulados')], max_length=30, verbose_name='Métrica')),
                ('period', models.CharField(choices=[('daily', 'Diário'), ('weekly', 'Semanal'), ('monthly', 'Mensal'), ('yearly', 'Anual')], max_length=20, verbose_name='Período')),
                ('is_global', models.BooleanField(default=True, help_text='Se True, é uma meta para todos os usuários. Se False, é individual.', verbose_name='Meta Global')),
                ('start_date', models.DateField(blank=True, null=True, verbose_name='Data de Início')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='Data de Término')),
                ('is_active', models.BooleanField(default=True, verbose_name='Ativa')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('reward', models.ForeignKey(blank=True, help_text='Recompensa ao atingir a meta', null=True, on_delete=django.db.models.deletion.SET_NULL, to='rewards.reward', verbose_name='Recompensa')),
            ],
            options={
                'verbose_name': 'Meta',
                'verbose_name_plural': 'Metas',
                'db_table': 'goals',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserReward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('redeemed_at', models.DateTimeField(auto_now_add=True, verbose_name='Data de Resgate')),
                ('points_spent', models.IntegerField(help_text='Quantidade de pontos gastos no resgate', verbose_name='Pontos Gastos')),
                ('status', models.CharField(choices=[('Pendente', 'Pendente'), ('Entregue', 'Entregue'), ('Cancelado', 'Cancelado')], default='Pendente', max_length=20, verbose_name='Status')),
                ('notes', models.TextField(blank=True, verbose_name='Observações')),
                ('reward', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='user_redemptions', to='rewards.reward', verbose_name='Recompensa')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_rewards', to=settings.AUTH_USER_MODEL, verbose_name='Usuário')),
            ],
            options={
                'verbose_name': 'Resgate de Recompensa',
                'verbose_name_plural': 'Resgates de Recompensas',
                'db_table': 'user_rewards',
                'ordering': ['-redeemed_at'],
            },
        ),
        migrations.CreateModel(
            name='UserGoalProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_value', models.IntegerField(default=0, help_text='Progresso atual do usuário nesta meta', verbose_name='Valor Atual')),
                ('completed', models.BooleanField(default=False, verbose_name='Completada')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Data de Conclusão')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Última Atualização')),
                ('goal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_progress', to='rewards.goal', verbose_name='Meta')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='goal_progress', to=settings.AUTH_USER_MODEL, verbose_name='Usuário')),
            ],
            options={
                'verbose_name': 'Progresso de Meta',
                'verbose_name_plural': 'Progressos de Metas',
                'db_table': 'user_goal_progress',
                'ordering': ['-updated_at'],
                'unique_together': {('user', 'goal')},
            },
        ),
    ]
