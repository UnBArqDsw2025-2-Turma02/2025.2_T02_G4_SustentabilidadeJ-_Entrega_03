from .decorador_base import AcaoDecorator

# Padr√£o de Projeto Estrutural: Decorator
# Este decorator adiciona um "di√°rio" do que acontece no sistema!

class LogDecorator(AcaoDecorator):
    """
    Decorator de Log - O Rep√≥rter do Sistema!

    Este decorator √© como um rep√≥rter que anota tudo que acontece.
    Toda vez que algu√©m registra uma a√ß√£o, ele imprime uma mensagem
    dizendo quem fez o qu√™.

    Por que isso √© √∫til?
    üìù Auditoria: Voc√™ consegue ver tudo que aconteceu no sistema
    üêõ Debug: Ajuda a encontrar problemas durante o desenvolvimento
    üëÄ Monitoramento: Acompanhe as atividades dos usu√°rios em tempo real

    Exemplo de uso:
        servico = RegistraAcaoService(token_service)
        servico_com_log = LogDecorator(servico)

        # Agora toda a√ß√£o vai aparecer no log!
        servico_com_log.registrar_acao(joao, acao)
        # Vai imprimir: [LOG] Registrando a√ß√£o 'Reciclagem' de Jo√£o
    """

    def registrar_acao(self, usuario, acao):
        """
        Registra a a√ß√£o E imprime uma mensagem de log.

        Funciona assim:
        1. ANTES: Imprime quem est√° fazendo o qu√™
        2. DURANTE: Chama o pr√≥ximo componente (pode ser outro decorator ou o servi√ßo)
        3. DEPOIS: Retorna os tokens que foram dados

        A mensagem de log mostra:
        [LOG] Registrando a√ß√£o 'NomeDaA√ß√£o' de NomeDoUsu√°rio

        Par√¢metros:
            usuario: A pessoa fazendo a a√ß√£o
            acao: A a√ß√£o sustent√°vel sendo registrada

        Retorna:
            Quantos tokens foram dados (vem do pr√≥ximo componente na cadeia)

        Exemplo:
            >>> log_decorator.registrar_acao(maria, acao_plantar)
            [LOG] Registrando a√ß√£o 'PlantioArvore' de Maria
            25
        """
        # Imprime o log ANTES de processar
        print(f"[LOG] Registrando a√ß√£o '{acao.tipoAcao}' de {usuario.nome}")

        # Passa para o pr√≥ximo componente fazer o trabalho
        return super().registrar_acao(usuario, acao)
